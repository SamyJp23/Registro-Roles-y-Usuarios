@page "/Usuario/Edit"
@page "/Usuario/Edit/{UserId:int}"
@using UserBlazorApp.UI.Dto
@inject NavigationManager navigationManager
@inject UsersInterface<UserResponse> userService
@inject UsersInterface<AspNetRoles> roleService
@inject UsersInterface<AspNetUserRoles> userRoleService


<EditForm Model="Usuarios" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3> <i class="fas fa-clipboard-list"></i> Editar Usuario</h3>
        </div>
        <div class="card-body">
            <div class="row"></div>
            <div class="mb-3">
                <label for="Nombre" class="form-label">Nombre:</label>
                <InputText @bind-Value="Usuarios.UserName" class="form-control" />
                <ValidationMessage For="@(() => Usuarios.UserName)" />
            </div>
            <div class="mb-3">
                <label for="Email" class="form-label">Email:</label>
                <InputText @bind-Value="Usuarios.Email" class="form-control" />
                <ValidationMessage For="@(() => Usuarios.Email)" />
            </div>
            <div class="mb-3">
                <label for="PhoneNumber" class="form-label">Número de Teléfono:</label>
                <InputText id="PhoneNumber" @bind-Value="Usuarios.PhoneNumber" class="form-control" />
                <ValidationMessage For="@(() => Usuarios.PhoneNumber)" />
            </div>

            <div class="card mt-3">
                <div class="card-body">
                    <table class="table table-bordered">
                        <thead class="bg-primary text-white">
                            <tr>
                                <th>Rol</th>
                                <th>Asignar</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var role in ListaRoles)
                            {
                                <tr>
                                    <td>@role.Name</td>
                                    <td>
                                        <input type="checkbox" @bind="roleSelections[role.Id]" />
                                    </td>

                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">

                <button type="button"  class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>

                <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span> Guardar </button>

                <button type="button" class="btn btn-outline-danger" @onclick="Volver"><span class="bi bi-arrow-bar-left"></span> Retroceder </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter] 
    public int UserId { get; set; }
    public UserResponse Usuarios { get; set; } = new UserResponse();
    public List<AspNetRoles> ListaRoles { get; set; } = new List<AspNetRoles>();
    private Dictionary<int, bool> roleSelections = new Dictionary<int, bool>();

    protected override async Task OnInitializedAsync()
    {
        ListaRoles = await roleService.GetAllAsync();
        Usuarios = await userService.GetByIdAsync(UserId);

        foreach (var role in ListaRoles)
        {
            roleSelections[role.Id] = Usuarios.Roles.Any(r => r.Id == role.Id);
        }
    }

    public async Task Guardar()
    {
        Usuarios.Roles = new List<RolResponse>();

        foreach (var roleSelection in roleSelections)
        {
            if (roleSelection.Value)
            {
                Usuarios.Roles.Add(new RolResponse { Id = roleSelection.Key });
            }
        }

        await userService.UpdateAsync(Usuarios);
      
    }

    public void Nuevo()
    {
       
    }

    public void Volver()
    {
        
    }
}