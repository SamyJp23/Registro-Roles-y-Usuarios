@page "/Usuario/Create"
@using UserBlazorApp.UI.Dto;
@inject NavigationManager navigationManager
@inject UsersInterface<UserResponse> userService
@inject UsersInterface<RolResponse> roleService
@inject UsersInterface<AspNetUserRoles> userRoleService
<EditForm Model="Usuarios" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3> <i class="fas fa-clipboard-list"></i> Crear Usuario</h3>
        </div>
        <div class="card-body">
            <div class="row"></div>
            <div class="mb-3">
                <label for="Nombre" class="form-label">Nombre:</label>
                <InputText @bind-Value="Usuarios.UserName" class="form-control" />
                <ValidationMessage For="@(() => Usuarios.UserName)" />
            </div>
            <div class="mb-3">
                <label for="Email" class="form-label">Email:</label>
                <InputText @bind-Value="Usuarios.Email" class="form-control" />
                <ValidationMessage For="@(() => Usuarios.Email)" />
            </div>
            <div class="mb-3">
                <label for="PhoneNumber" class="form-label">Número de Teléfono:</label>
                <InputText id="PhoneNumber" @bind-Value="Usuarios.PhoneNumber" class="form-control" />
                <ValidationMessage For="@(() => Usuarios.PhoneNumber)" />
            </div>

            <div class="card mt-3">
                <div class="card-body">
                    <table class="table table-bordered text-center">
                        <thead class="bg-primary text-white">
                            <tr>
                                <th>Rol</th>
                                <th>Asignar</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var role in ListaRoles)
                            {
                                <tr>
                                    <td>@role.Name</td>
                                    <td>
                                          <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="role-@role.Id" @bind="rolSeleccionado[role.Id]">
                        <label class="form-check-label" for="role-@role.Id"></label>
                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">
               
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
               
                <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span> Guardar </button>
               
                <button type="button" class="btn btn-outline-danger" @onclick="Volver"><span class="bi bi-arrow-bar-left"></span> Retroceder </button>
            </div>
        </div>
    </div>
</EditForm>

@code{
    [Inject] protected ToastService toastService { get; set; }
    public UserResponse Usuarios { get; set; } = new UserResponse();
    public List<RolResponse> ListaRoles { get; set; } = new List<RolResponse>();
    private Dictionary<int, bool> rolSeleccionado = new Dictionary<int, bool>();

    protected override async Task OnInitializedAsync()
    {
        ListaRoles = await roleService.GetAllAsync();
        foreach (var role in ListaRoles)
        {
            rolSeleccionado[role.Id] = false;
        }
    }
    public void NotificacionGuardo()
    {
        toastService.Notify(new(ToastType.Success, $"Se guardo correctamente"));
    }
    public void NotificacionError()
    {
        toastService.Notify(new(ToastType.Danger, $"Error al guardar."));
    }
    public async Task Guardar()
    {
        var user = new UserResponse
            {
                UserName = Usuarios.UserName,
                Email = Usuarios.Email,
                PhoneNumber = Usuarios.PhoneNumber,
                Roles = new List<RolResponse>()
            };

        var guardar = await userService.AddAsync(user);

        foreach (var roleSelection in rolSeleccionado)
        {
            if (roleSelection.Value)
            {
                var userRole = new AspNetUserRoles
                    {
                        UserId = guardar.Id,
                        RoleId = roleSelection.Key
                    };

                await userRoleService.AddAsync(userRole);
            }
        }
        NotificacionGuardo();
        Volver();
    }

    public void Nuevo()
    {
        this.Usuarios = new UserResponse();
    }
    public void Volver()
    {
        
            navigationManager.NavigateTo("/Usuario/Index/");
        
    }
}

